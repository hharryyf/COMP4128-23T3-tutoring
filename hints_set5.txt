A. We can view this problem as a shortest path problem. The only restriction is when you detect the shortest distance to a vertex is greater than 
the water level, you cannot enter that vertex (i.e., don't push that vertex to the queue).

B. This problem uses the property we covered in the tutorial. An edge is useful if and only if dist(1, u) + weight(u, v) = dist(1, v).
Add the useful edges of the graph (all the other edges can be removed). For the remaining edges, remove the edges greedily.

C. This problem is a combination of today's Floyd question + PS2 E. Hint: You can work the queries in a backward direction.

D. If you ignore the unassigned edges, and the shortest path is already less than L, there's definitely no solution.
If the shortest path is equal to L, you can assign all the unassigned edges as +inf.
Otherwise, you know the shortest path is greater than L. This means, the shortest path must go through the unassigned edges.
The key observation is you only need to assign 1 unassigned edge as some W and all the remaining unassigned edges as +inf.

E. We are solving shortest path problems this week. How is this problem related to shortest path? Hint: system of different constraints.

F. Using the key property we discussed in the tutorial you can derive an O(N^4) solution easily. This is too slow.
Now, to calculate how many edges are on some shortest path between i and j, if you know how many of these edges (a, b) starts from a 
for each a = 1..N, (i.e, cnt[a] means how many edges a -> v that is on the shortest path between a and b for some v = 1..N), the answer 
to (i, j) is simply sum(cnt[a], a = 1..N). Think how you would maintain the cnt array.